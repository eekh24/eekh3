<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Item</title>
    <style>
      .menu-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        padding-bottom: 0px;
      }
      .menu-row {
        display: flex;
        justify-content: center;
        margin-bottom: 0px;
      }
      .menu-item {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 5px;
        padding: 15px;
        width: 170px;
        text-align: center;
      }
      .menu-item img {
        border-radius: 10%;
        width: 100%;
        height: auto;
      }
      .menu-item span {
        display: block;
        margin: 10px 0;
        font-size: 16px;
      }
      .menu-item button {
        background-color: blue;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 5px;
        width: 105px;
      }

      .cart-button {
        margin-top: 5;
        margin-bottom: 65px;
        width: 100%;
        background-color: orange;
        color: white;
        text-align: center;
        padding: 15px;
        font-size: 18px;
        border: none;
        border-radius: 5px 5px 0 0;
        cursor: pointer;
      }
      .cart-button:hover {
        background-color: darkorange;
      }
      .message {
        color: green;
        font-size: 18px;
        font-weight: bold;
        margin-top: 0px;
      }
      .hidden {
        display: none;
      }

      #addItemButton {
        width: 100%;
        background-color: #4caf50;
        color: white;
        padding: 14px 20px;
        margin-top: 5px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      #dummyItem {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="menu-container" id="menuContainer">
      <!-- Existing items will be dynamically inserted here -->

      <button id="addItemButton" onclick="addItem()">Add +</button>

      <div id="dummyItem">
        <div class="menu-row">
          <div class="menu-item" id="newItem">
            <img id="dummyImage" src="placeholder.jpg" alt="New Item" />

            <input type="file" id="newItemImage" accept="image/*" />
            <input id="newItemName" placeholder="Item Name" />
            <input
              id="newItemPrice"
              style="color: green"
              placeholder="Item Price"
            />

            <button onclick="doneItem()">Done</button>
          </div>
        </div>
      </div>
    </div>

    <script type="module">
      // Initialize Firebase
      import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.8/firebase-app.js";
      import {
        getFirestore,
        collection,
        getDocs,
        doc,
        setDoc,
        deleteDoc,
        updateDoc,
      } from "https://www.gstatic.com/firebasejs/9.6.8/firebase-firestore.js";

      const firebaseConfig = {
        apiKey: "AIzaSyDjpg5dNL6R44dPpoDQabNaT8tLVmVWTQQ",
        authDomain: "eekh-website.firebaseapp.com",
        databaseURL: "https://eekh-website-default-rtdb.firebaseio.com",
        projectId: "eekh-website",
        storageBucket: "eekh-website.appspot.com",
        messagingSenderId: "276234231567",
        appId: "1:276234231567:web:1509267f60d97a83cea87a",
        measurementId: "G-QX5HCKXMDK",
      };

      const app = initializeApp(firebaseConfig);
      const db = getFirestore(app);

      async function fetchMenuItems() {
        const menuContainer = document.getElementById("menuContainer");
        const querySnapshot = await getDocs(collection(db, "menu-items"));

        querySnapshot.forEach((doc) => {
          const itemData = doc.data();
          const itemElement = document.createElement("div");
          itemElement.className = "menu-row";
          itemElement.innerHTML = `
                    <div class="menu-item">
                        <img src="${itemData.image}" alt="${itemData.name}">
                        <span>${itemData.name}</span>
                        <span style="color: green;">${itemData.price}</span>
                        <button onclick="deleteExistingItem('${doc.id}')">Delete</button>
                        <button onclick="editExistingItem('${doc.id}', '${itemData.name}', ${itemData.price})">Edit</button>
                    </div>
                `;
          menuContainer.insertBefore(itemElement, menuContainer.firstChild);
        });
      }

      function addItem() {
        document.querySelector("#dummyItem").style.display = "block";

        const newItemImageInput = document.getElementById("newItemImage");
        const dummyImage = document.getElementById("dummyImage");

        newItemImageInput.addEventListener("change", (e) => {
          const file = newItemImageInput.files[0];
          const reader = new FileReader();

          reader.onload = () => {
            const imageDataUrl = reader.result;
            dummyImage.src = imageDataUrl;
          };

          reader.readAsDataURL(file);
        });
      }

      async function doneItem(docRef) {
        const itemName = document.getElementById("newItemName").value;
        const itemPrice = document.getElementById("newItemPrice").value;
        const itemImage = document.getElementById("dummyImage").src;

        if (!itemName || !itemPrice || !itemImage) {
          alert("Please fill out all fields.");
          return;
        }

        const newItem = {
          name: itemName,
          price: parseFloat(itemPrice),
          image: itemImage,
          quantityControlsId: Math.random(),
          quantityControlsInputId: Math.random(),
          addToCartButtonId:  Math.random()
        };

        try {
          await setDoc(doc(db, "menu-items", itemName), newItem);
          console.log("Item added successfully!"); // Hide and reset the dummy item fields

          document.getElementById("newItemName").value = "";
          document.getElementById("newItemPrice").value = "";
          document.getElementById("dummyImage").src = "placeholder.jpg";
          document.querySelector("#dummyItem").style.display = "none"; // Refresh the list of items

          document.getElementById("menuContainer").innerHTML = "";
          fetchMenuItems();
        } catch (error) {
          console.error("Error adding item: ", error);
        }
        //   location.reload();
      }

      async function deleteExistingItem(itemId) {
        try {
          await deleteDoc(doc(db, "menu-items", itemId));
          console.log("Item deleted successfully!");

          // Refresh the list of items
          document.getElementById("menuContainer").innerHTML = "";
          fetchMenuItems();
        } catch (error) {
          console.error("Error deleting item: ", error);
        }
        location.reload();
      }

      async function editExistingItem(itemId, currentName, currentPrice) {
        const newName = prompt("Enter new name:", currentName);
        const newPrice = prompt("Enter new price:", currentPrice);

        if (newName !== null && newPrice !== null) {
          try {
            await updateDoc(doc(db, "menu-items", itemId), {
              name: newName,
              price: parseFloat(newPrice),
            });
            console.log("Item updated successfully!");

            // Refresh the list of items
            document.getElementById("menuContainer").innerHTML = "";
            fetchMenuItems();
          } catch (error) {
            console.error("Error updating item: ", error);
          }
        }
        location.reload();
      }

      window.addItem = addItem;
      window.doneItem = doneItem;
      window.deleteExistingItem = deleteExistingItem;
      window.editExistingItem = editExistingItem;

      // Fetch and display existing items on page load
      fetchMenuItems();
    </script>
  </body>
</html>
